// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> Source;
RWTexture2D<float4> Result;
float4x4 CamToWorld;
float4x4 CamInverseProjection;

//enum ShapeType
//{
//    Circle = 0,
//    Cube = 1,
//    Cylinder = 2
//};

struct Shape
{
    uint shapeType;
    float3 pos;
    float4x4 inverseRotMatrix;
    float4x4 inverseScaleMatrix;
    float4 color;
    float3 metadata;
    uint parentIndex;
};

struct BlendContainer
{
    uint blendFunc;
    uint parentBlendFunc;
    uint numChilds;
    uint numShapes;
    uint parentIndex;
    uint isSmoothBlend;
    float smoothFactor;
    uint isParentSmoothBlend;
    float parentSmoothFactor;
};

StructuredBuffer<Shape> Shapes;
uint NumShapes;

StructuredBuffer<BlendContainer> BlendContainers;
uint NumBlendContainers;

#define MAX_STEPS 100
#define MIN_HIT_DIST 0.001f
#define MAX_TRACE_DIST 100

float GetDistFromCube(float3 pos, float3 size)
{
    float3 o = abs(pos) - size;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

float GetDistFromSphere(float3 pos, float radius)
{
    return length(pos) - radius;
}

float GetDistFromCylinderY(float3 pos, float2 h)
{
    float2 d = abs(float2(length((pos).xz), pos.y)) - h;
    return length(max(d, 0)) + max(min(d.x, 0), min(d.y, 0));
}

float GetDistFromCylinderX(float3 pos, float2 h)
{
    float2 d = abs(float2(length((pos).yz), pos.x)) - h;
    return length(max(d, 0)) + max(min(d.x, 0), min(d.y, 0));
}

float GetDistFromCylinderZ(float3 pos, float2 h)
{
    float2 d = abs(float2(length((pos).xy), pos.z)) - h;
    return length(max(d, 0)) + max(min(d.x, 0), min(d.y, 0));
}

float4 IntersectSDF(float4 distA, float4 distB)
{
    if (max(distA.w, distB.w) == distA.w)
        return distA;
    else
        return distB;
}

float4 UnionSmoothSDF(float4 distA, float4 distB, float smoothFactor)
{
    float3 color;
    if (min(distA.w, distB.w) == distA.w)
        color = distA.xyz;
    else
        color = distB.xyz;

    float colorH = clamp(0.5 + 0.5 * (distB.w - distA.w) / (smoothFactor / 2), 0.0, 1.0);
    float h = clamp(0.5 + 0.5 * (distB.w - distA.w) / smoothFactor, 0.0, 1.0);
    float blendDst = lerp(distB.w, distA.w, h) - smoothFactor * h * (1.0 - h);
    float3 blendCol = lerp(distB.xyz, distA.xyz, colorH);
    return float4(blendCol, blendDst);
}

float4 UnionSDF(float4 distA, float4 distB) 
{
    if (min(distA.w, distB.w) == distA.w)
        return distA;
    else
        return distB;
}

float4 DifferenceSDF(float4 distA, float4 distB) 
{
    if (max(distA.w, -distB.w) == distA.w)
        return distA;
    else
        return float4(distB.x, distB.y, distB.z, -distB.w);
}

float4 GetBlendDistance(uint blendType, uint isSmoothBlend, float smoothFactor, float4 pDistance, float4 distance)
{
    if (blendType == 0) // union
    {
        if (isSmoothBlend == 0)
            return UnionSDF(pDistance, distance);
        else
            return UnionSmoothSDF(pDistance, distance, smoothFactor);
    }
    else if (blendType == 1) // intersection
        return IntersectSDF(pDistance, distance);
    else if (blendType == 2) // difference
        return DifferenceSDF(pDistance, distance);

    return 0;
}

float4 SceneSDF(float3 pos)
{
    float4 datas[25];
    uint firstBlend[25];
    float distance = 0;


    [unroll(25)] for (int j = 0; j < 25; j++)
    {
        firstBlend[j] = 0;
    }

    for (uint i = 0; i < NumShapes; i++)
    {
        int pIndex = NumShapes - 1 - i;
        Shape shape = Shapes[pIndex];

        float3 globalPos = pos - shape.pos;
        globalPos = mul(shape.inverseRotMatrix, float4(globalPos, 1)).xyz;
        globalPos = mul(shape.inverseScaleMatrix, float4(globalPos, 1)).xyz;

        if (shape.shapeType == 0) // Circle
            distance = GetDistFromSphere(globalPos, shape.metadata.x);
        else if (shape.shapeType == 1) // Square
            distance = GetDistFromCube(globalPos, shape.metadata.xyz);
        else if (shape.shapeType == 2) // Cylinder
            distance = GetDistFromCylinderY(globalPos, shape.metadata.xy);

        uint blendFunc = BlendContainers[shape.parentIndex].blendFunc;

        if (firstBlend[shape.parentIndex] != 0)
        {
            datas[shape.parentIndex] = GetBlendDistance(
                blendFunc, 
                BlendContainers[shape.parentIndex].isSmoothBlend,
                BlendContainers[shape.parentIndex].smoothFactor,
                datas[shape.parentIndex], 
                float4(shape.color.rgb, distance));
        }
        else
        {
            datas[shape.parentIndex] = float4(shape.color.rgb, distance);
            firstBlend[shape.parentIndex] = 1;
        }
    }

    float4 parentData;
    float4 data;

    // Dont need to blend main container that will always be first element of BlendContainers array
    for (uint k = 0; k < NumBlendContainers - 1; k++)
    {
        int pIndex = NumBlendContainers - 1 - k;
        BlendContainer blendContainer = BlendContainers[pIndex];

        uint parentBlendFunc = blendContainer.parentBlendFunc;
        parentData = datas[blendContainer.parentIndex];
        data = datas[pIndex];

        datas[blendContainer.parentIndex] = GetBlendDistance(
            parentBlendFunc, 
            blendContainer.isParentSmoothBlend,
            blendContainer.parentSmoothFactor,
            parentData, 
            data);
    }

    return datas[0];
}

float3 GetNormal(float3 pos)
{
    float2 eplison = float2(0.01, 0);
    float3 normal = SceneSDF(pos).w - float3(
        SceneSDF(pos - eplison.xyy).w,
        SceneSDF(pos - eplison.yxy).w,
        SceneSDF(pos - eplison.yyx).w
        );

    return normalize(normal);
}

float4 Raymarch(float3 ray_origin, float3 ray_direction)
{
    float dist_from_origin = 0.0f;
    float4 data;

    for (int i = 0; i < MAX_STEPS; i++)
    {
        float3 current_pos = ray_origin + dist_from_origin * ray_direction;

        data = SceneSDF(current_pos);

        dist_from_origin += data.w;

        if (data.w < MIN_HIT_DIST || dist_from_origin > MAX_TRACE_DIST)
            break;
    }

    return float4(data.rgb, dist_from_origin);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    float width, height = 0;
    Result.GetDimensions(width, height);

    // Calculate uv
    float2 uv = id.xy / float2(width, height) * 2 - 1;

    float3 ray_origin = mul(CamToWorld, float4(0.0, 0.0, 0.0, 1.0)).xyz;

    float3 ray_direction = mul(CamInverseProjection, float4(uv, 0, 1)).xyz;
    ray_direction = mul(CamToWorld, float4(ray_direction, 0)).xyz;
    ray_direction = normalize(ray_direction);

    float4 data = Raymarch(ray_origin, ray_direction);

    if (data.w < MAX_TRACE_DIST)
    {
        float3 normal = GetNormal(ray_origin + ray_direction * data.w);
        Result[id.xy] = float4(data.xyz, 1.0);
    }
    else
        Result[id.xy] = Source[id.xy];
}
